//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : Node.h
//  @ Date : 02.04.2014
//  @ Author : 
//
//


#if !defined(_NODE_H)
#define _NODE_H

#include "Serializable.h"

template < T : Class> class Node : public Serializable {
public:
    void Node<T>(int string name);
    void Node<T>(int string nodeName, int string objName, int T* object);
    int addObject(int string name, int T* object);
    int addNextRef(int Node<T>* ref);
    int addPreviousRef(int Node<T>* ref);
    string getNodeName();
    string[] getObjNames();
    T* getObject(int string name);
    T[]* getObjects();
    Node<T>* getNextRef(int string nodeName);
    Node<T>* getNextRef(int unsigned int number);
    vector<Node<T>*> getNextRefs();
    Node<T>* getPreviousRef(int string nodeName);
    Node<T>* getPreviousRef(int unsigned int number);
    vector<Node<T>*> getPreviousRefs();
    unsigned int getNextRefsNumber();
    unsigned int getPreviousRefsNumber();
    int removeObject(int string name);
    int removeAllObjects();
    int removeNextRef(int string nodeName);
    int removeNextRef(int unsigned int number);
    int removePreviousRef(int string number);
    int removePreviousRef(int unsigned int number);
private:
    map<string key, T* value> objects;
    const string nodeName;
    vector<Node<T>*> nextNodesRefs;
    vector<Node<T>*> previousNodesRefs;
};

#endif  //_NODE_H
